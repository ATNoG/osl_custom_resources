# -*- coding: utf-8 -*-
# @Author: Rafael Direito
# @Date:   2024-10-25 08:10:27
# @Last Modified by:   Rafael Direito
# @Last Modified time: 2025-06-21 10:43:31
import kopf
from kubernetes import client, config, watch
from kubernetes.client import CoreV1Api
import requests
import json 

from config import Config
from itav_network_slice_manager import ITAvNetworkSliceManager

# Set up logging
logger = Config.setup_logging()

class UECRHandler:

    def __init__(
        self,
        slice_manager: ITAvNetworkSliceManager,
        custom_objects_api: CoreV1Api
    ):
        self.slice_manager = slice_manager
        self.custom_objects_api = custom_objects_api
        
    def process_nslice_ue_event(
        self, event: str, spec: dict, metadata: dict
        ) -> None:

        cr_name = metadata['name']
        cr_namespace = metadata['namespace']

        if event == "ADD":
            logger.info(
                f"A resource with group: {Config.cr_group}, "
                f"version: {Config.cr_version}, plural: {Config.cr_plural} "
                f"was CREATED. This resource is named '{cr_name}' and was "
                f"deployed in namespace '{cr_namespace}'. Will now parse this "
                "resource and  request the creation of a Network Slice UE via "
                f"ITAvNetworkSliceManager (url={self.slice_manager.base_url})"
            )
        elif event == "UPDATE":
            logger.info(
            f"A resource with group: {Config.cr_group}, "
            f"version: {Config.cr_version}, plural: {Config.cr_plural} "
            f"was UPDATED. This resource is named '{cr_name}' and was "
            f"deployed in namespace '{cr_namespace}'. "
            f"Resource: {spec}"
        )

        # Make request to the Slice Manager
        should_apply_cr, enforcement_result = self.slice_manager \
            .create_ue(
                spec, self._spec_params_to_ue_create_payload(spec)
            )
        
        if should_apply_cr:
            self.process_network_slice_ue_enforcement(
                cr_namespace, cr_name, enforcement_result
            )
        
    
    def _spec_params_to_ue_create_payload(self, spec):

        nslice_ue_spec = spec["itav-ue"]

        # Generated by AI
        payload = {
            "IMSI": int(nslice_ue_spec["supi"].split("imsi-")[1]),
            "numIMSIs": 1,
            "slice": nslice_ue_spec["dnn"],
            "IPV4": nslice_ue_spec["pduSession"]["ipV4"],
            "IPV6":  nslice_ue_spec["pduSession"]["ipV6"],
            "AMDATA": True,
            "DEFAULT": "TRUE",
            "UEcanSendSNSSAI": "FALSE",
            "AMBRUP": int(nslice_ue_spec.get("sessionAmbr", {}).get("uplink"))
            if nslice_ue_spec.get("sessionAmbr", {}).get("uplink") is not None
            else None,
            "AMBRDW": int(nslice_ue_spec.get("sessionAmbr", {}).get("downlink"))
            if nslice_ue_spec.get("sessionAmbr", {}).get("downlink") is not None
            else None
        }

        # Remove any keys where the value is None
        payload = {k: v for k, v in payload.items() if v is not None}

        logger.info(
            "JSON Payload for the Slice Manager: "
            f"{json.dumps(payload, indent=4)}"
        )

        return payload


    
    def process_network_slice_ue_enforcement(
        self, namespace: str, name: str, enforcement_result: dict
        ) -> None:

        patch = {
            "spec": {
                "itav-ue-enforcement": enforcement_result
            }
        }
    
        try:
            # Apply the patch to update 'spec.data2' of the custom resource
            self.custom_objects_api.patch_namespaced_custom_object(
                group=Config.cr_group,
                version=Config.cr_version,
                namespace=namespace,
                plural=Config.cr_plural,
                name=name,
                body=patch
            )
            logger.info(
                f"Updated 'spec.itav-ue-enforcement' for {name} in "
                f"{namespace} to {enforcement_result}")

        except client.exceptions.ApiException as e:
            logger.error(
                "Exception when updating 'spec.itav-ue-enforcement' "
                f"in custom resource: {e}")
    

